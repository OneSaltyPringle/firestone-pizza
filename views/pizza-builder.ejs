<%- include('partials/header', { title: 'Build Your Pizza', user: user }) %>

<section class="section-padding">
  <div class="container">

    <div class="text-center mb-5">
      <h2 class="mb-3">Customize Your Pizza</h2>
      <p>Build the pizza of your dreams.</p>
    </div>

    <form id="pizzaForm" class="custom-block bg-white shadow-lg p-4 p-md-5 rounded-4 mx-auto" style="max-width: 800px;">

      <div class="row g-3 mb-4">
        <div class="col-12 col-md-6">
          <label class="form-label fw-semibold">Size</label>
          <select class="form-select" name="size" required>
            <option value="">Select Size</option>
            <% if (typeof presetPizzas !== "undefined" && presetPizzas.length > 0) { %>
              <% presetPizzas.forEach(pizza => { %>
                <option value="<%= pizza._id %>"><%= pizza.name %></option>
              <% }) %>
            <% } %>
          </select>
        </div>

        <div class="col-12 col-md-6">
          <label class="form-label fw-semibold">Crust</label>
          <select id="crustSelect" name="crust" class="form-select" required>
            <option value="">Select Crust</option>
            <% crusts.forEach(c => { %>
              <option value="<%= c.image %>"><%= c.name %></option>
            <% }) %>
          </select>
        </div>

        <div class="col-12 col-md-6">
          <label class="form-label fw-semibold">Sauce</label>
          <select id="sauceSelect" name="sauce" class="form-select" required>
            <option value="">Select Sauce</option>
            <% sauces.forEach(s => { %>
              <option value="<%= s.image %>"><%= s.name %></option>
            <% }) %>
          </select>
        </div>

        <div class="col-12 col-md-6">
          <label class="form-label fw-semibold">Cheese</label>
          <select id="cheeseSelect" name="cheese" class="form-select" required>
            <option value="">Select Cheese</option>
            <% cheeses.forEach(ch => { %>
              <option value="<%= ch.image %>"><%= ch.name %></option>
            <% }) %>
          </select>
        </div>
      </div>

      <div class="mb-4">
        <label class="form-label fw-semibold">Drag Toppings onto Your Pizza</label>
        <div class="topping-list">
          <% toppings.forEach(t => { %>
            <div class="topping-item shadow-sm rounded-3 p-2">
              <img 
                src="<%= t.image %>"
                alt="<%= t.name %>"
                draggable="true"
                data-topping="<%= t.name %>"
                width="50"
                height="50"
                class="draggable-img mb-2"
              >
              <div class="topping-name fw-medium text-muted"><%= t.name %></div>
            </div>
          <% }) %>
        </div>
      </div>

      <div class="d-flex justify-content-center mb-4">
        <div id="pizzaCanvas"
          class="canvas-container shadow-sm rounded-circle d-flex justify-content-center align-items-center"
          style="
            width: 100%;
            max-width: 500px;
            aspect-ratio: 1 / 1;
            position: relative;
            background: #f8f8f8;
            border: 2px dashed #ddd;
          ">
          <p class="text-muted text-center m-0">Drop toppings here</p>
          <img id="layer-crust" class="pizza-layer">
          <img id="layer-sauce" class="pizza-layer">
          <img id="layer-cheese" class="pizza-layer">
        </div>
      </div>

      <input type="hidden" name="toppings" id="toppingsInput">

      <div class="d-flex flex-column flex-md-row justify-content-center gap-3 mt-4">
        <button type="button" id="clearBtn" class="btn custom-btn custom-border-btn px-4">Clear Toppings</button>
        <button type="submit" class="btn custom-btn px-4">Add to Cart</button>
      </div>

    </form>

  </div>
</section>

<%- include('partials/footer') %>

<style>
  .topping-list {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
    max-height: 300px;
    overflow-y: auto;
  }

  .topping-item {
    text-align: center;
    cursor: grab;
    width: 70px;
    flex-shrink: 0;
  }

  .topping-item:hover {
    transform: scale(1.1);
  }

  .pizza-layer {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0; 
    left: 0;
    object-fit: cover;
    pointer-events: none;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const toppingImages = document.querySelectorAll('.draggable-img');
  const canvas = document.getElementById('pizzaCanvas');
  const toppingsInput = document.getElementById('toppingsInput');
  const crustSelect = document.getElementById('crustSelect');
  const sauceSelect = document.getElementById('sauceSelect');
  const cheeseSelect = document.getElementById('cheeseSelect');
  const clearBtn = document.getElementById('clearBtn');
  const layerCrust = document.getElementById('layer-crust');
  const layerSauce = document.getElementById('layer-sauce');
  const layerCheese = document.getElementById('layer-cheese');

  let placedToppings = [];

  crustSelect.addEventListener('change', () => {
    const value = crustSelect.value.toLowerCase().replace(/\s/g, '-');
    if (value) {
      layerCrust.src = value;
      layerCrust.style.display = 'block';
    } else {
      layerCrust.style.display = 'none';
    }
  });

  sauceSelect.addEventListener('change', () => {
    const value = sauceSelect.value.toLowerCase().replace(/\s/g, '-');
    if (value) {
      layerSauce.src = value;
      layerSauce.style.display = 'block';
    } else {
      layerSauce.style.display = 'none';
    }
  });

  cheeseSelect.addEventListener('change', () => {
    const value = cheeseSelect.value.toLowerCase().replace(/\s/g, '-');
    if (value) {
      layerCheese.src = value;
      layerCheese.style.display = 'block';
    } else {
      layerCheese.style.display = 'none';
    }
  });

  clearBtn.addEventListener('click', () => {
    const all = canvas.querySelectorAll('img[data-topping]');
    all.forEach(img => canvas.removeChild(img));
    placedToppings = [];
    toppingsInput.value = "[]";
  });

  toppingImages.forEach(img => {
    img.addEventListener('dragstart', e => {
      if (!crustSelect.value || !sauceSelect.value) {
        alert("Please select crust and sauce first!");
        e.preventDefault();
        return;
      }
      e.dataTransfer.setData('text/plain', img.dataset.topping);
    });
  });

  canvas.addEventListener('dragover', e => e.preventDefault());

  canvas.addEventListener('drop', e => {
    e.preventDefault();
    const topping = e.dataTransfer.getData('text/plain');

    const canvasRect = canvas.getBoundingClientRect();
    const dropX = e.clientX - canvasRect.left;
    const dropY = e.clientY - canvasRect.top;

    const centerX = canvas.offsetWidth / 2;
    const centerY = canvas.offsetHeight / 2;
    const dx = dropX - centerX;
    const dy = dropY - centerY;
    const dist = Math.sqrt(dx * dx + dy * dy);

    const pizzaRadius = canvas.offsetWidth / 2;
    const centerThreshold = pizzaRadius * 0.2;

    const region = dist < centerThreshold ? 'center' : (dropX < centerX ? 'left' : 'right');
    const count = region === 'center' ? 40 : 25;

    const minRadius = pizzaRadius * 0.15;
    const maxRadius = pizzaRadius * 0.8;

    for (let i = 0; i < count; i++) {
      const angle = Math.random() * 2 * Math.PI;
      const radius = minRadius + Math.random() * (maxRadius - minRadius);
      let x = centerX + radius * Math.cos(angle);
      let y = centerY + radius * Math.sin(angle);

      if (region === 'left' && x > centerX) continue;
      if (region === 'right' && x < centerX) continue;

      const el = document.createElement('img');
      el.src = document.querySelector(`img[data-topping="${topping}"]`).src;
      const toppingSize = pizzaRadius * 0.12;
      el.width = toppingSize;
      el.height = toppingSize;
      el.style.position = 'absolute';
      el.style.left = (x - toppingSize / 2) + 'px';
      el.style.top = (y - toppingSize / 2) + 'px';
      el.title = 'Click to remove';
      el.style.cursor = 'pointer';
      el.dataset.topping = topping;
      el.dataset.region = region;

      el.onclick = () => {
        const all = canvas.querySelectorAll(`img[data-topping='${topping}']`);
        all.forEach(icon => canvas.removeChild(icon));
        placedToppings = placedToppings.filter(t => t.name !== topping);
        toppingsInput.value = JSON.stringify(placedToppings);
      };

      canvas.appendChild(el);
    }

    placedToppings.push({ name: topping, region });
    toppingsInput.value = JSON.stringify(placedToppings);
  });

  document.getElementById('pizzaForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const size = document.querySelector('select[name="size"]').value;
    const crust = document.querySelector('select[name="crust"]').value;
    const sauce = document.querySelector('select[name="sauce"]').value;
    const cheese = document.querySelector('select[name="cheese"]').value;
    const toppings = JSON.stringify(placedToppings);

    try {
      const res = await fetch('/pizza/builder/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          size,
          crust,
          sauce,
          cheese,
          toppings
        })
      });

      if (res.status === 401) {
        const data = await res.json();
        window.location.href = data.redirect || '/login';
        return;
      }

      if (!res.ok) {
        throw new Error('Server error adding pizza to cart');
      }

      const data = await res.json();
      if (data.redirect) {
        window.location.href = data.redirect;
      } else {
        alert('Pizza added to cart!');
      }

    } catch (err) {
      alert(err.message);
    }
  });
});
</script>
